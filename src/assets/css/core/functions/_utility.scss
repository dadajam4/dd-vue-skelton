//
// Utilitiy
//

//
// type checkers
//
@function ui-is-number($value) {
  @return type-of($value) == 'number';
}

@function ui-is-nounit-number($value) {
  @return ui-is-number($value) and unit($value) == "";
}

@function ui-is-time($value) {
  @return ui-is-number($value) and index('ms' 's', unit($value)) != null;
}

@function ui-is-duration($value) {
  @return ui-is-time($value);
}

@function ui-is-angle($value) {
  @return ui-is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;
}

@function ui-is-frequency($value) {
  @return ui-is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}

@function ui-is-integer($value) {
  @return ui-is-number($value) and round($value) == $value;
}

@function ui-is-relative-length($value) {
  @return ui-is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}

@function ui-is-absolute-length($value) {
  @return ui-is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

@function ui-is-percentage($value) {
  @return ui-is-number($value) and unit($value) == '%';
}

@function ui-is-length($value) {
  @return ui-is-relative-length($value) or ui-is-absolute-length($value);
}

@function ui-is-resolution($value) {
  @return ui-is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}

@function ui-is-position($value) {
  @return ui-is-length($value) or ui-is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}

@function ui-is-map($value) {
  @return type-of($value) == 'map';
}

@function ui-is-list($value) {
  @return type-of($value) == 'list';
}


//
// etc
//

@function ui-nounit($value) {
  $_nounit_divisor: (floor($value) * 2) % 2 + 1;
  @return ($value / $_nounit_divisor);
}

@function ui-rem2px($rem) {
  @return ui-nounit($rem) * $ui-html-base-font-size;
}

@function ui-to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    }

    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}



//
// string functions
//
@function ui-str-split($string, $separator) {
  $split-arr: ();
  $index: str-index($string, $separator);
  @while $index != null {
    $item: str-slice($string, 1, $index - 1);
    $split-arr: append($split-arr, $item);
    $string: str-slice($string, $index + 1);
    $index: str-index($string, $separator);
  }
  $split-arr: append($split-arr, $string);
  @return $split-arr;
}

// ui-str-replace() - Replace in a string
//
// @param {string}  $string    String that you want to replace
// @param {string}  $substr    String that is to be replaced by `$newsubstr`
// @param {string}  $newsubstr String that replaces `$substr`
// @param {number*} $all       Flag for replaceing all (1+) or not (0)
// @return {string}
@function ui-str-replace($string, $substr, $newsubstr, $all: 0) {
  $position-found: str-index($string, $substr);

  @while ($position-found > 0) {
    $length-substr: str-length($substr);
    $string-pre: str-slice($string, 0, $position-found - 1);
    $string-post: str-slice($string, $position-found + $length-substr);
    $string: $string-pre + $newsubstr + $string-post;

    $position-found: 0;

    @if ($all > 0) {
      $position-found: str-index($string, $substr);
    }
  }

  @return $string;
}



//
// map functions
//

// a map-set function (not included with Sass)
@function ui-map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}

/// Map deep get
@function ui-map-deep-get($map, $key-map, $default: null) {
  $keys: ui-str-split($key-map, ".");
  @each $key in $keys {
    @if map-has-key($map, $key) == false {
      @return $default;
    }
    $map: map-get($map, $key);
  }
  @return $map;
}

// Set User Drag
@mixin ui-user-drag($drag) {
  -webkit-user-drag: $drag;
  -khtml-user-drag: $drag;
  user-drag: $drag;
}

// Truncate
@mixin ui-truncate($max-width: 100%, $text: ellipsis) {
  max-width: $max-width;
  overflow: hidden;
  text-overflow: $text;
  white-space: nowrap;
}

// Square Sizing
@mixin ui-square($size) {
  width: $size;
  height: $size;
}

// Brightness
@function ui-brightness($color) {
  $sum: red($color) + green($color) + blue($color);
  @return percentage($sum / (255*3));
}

// Remove Tap Highlight
@mixin ui-remove-tap-highlight() {
  -webkit-tap-highlight-color: rgba(0 ,0 , 0, 0);

  &::-moz-focus-inner {
    border: 0;
  }
}




@function ui-map-to-json($map) {
  $str: "{";
  $index: 0;
  $keys: map-keys($map);
  $count: length($keys);
  @each $key, $value in $map {
    $index: $index + 1;
    $str: $str + "\"" + $key + "\":" + ui-to-json($value);
    @if $index != $count {
      $str: $str + ",";
    }
  }
  $str: $str + "}";
  @return $str;
}

@function ui-list-to-json($list) {
  $str: "[";
  $count: length($list);
  @each $value in $list {
    $index: index($list, $value);
    $str: $str + ui-to-json($value);
    @if $index != $count {
      $str: $str + ",";
    }
  }
  $str: $str + "]";
  @return $str;
}

@function ui-to-json($value) {
  $str: "";
  $type: type-of($value);
  @if ui-is-map($value) {
    $str: $str + ui-map-to-json($value);
  } @else if ui-is-list($value) {
    $str: $str + ui-list-to-json($value);
  } @else if ui-is-nounit-number($value) {
    $str: $str + $value;
  } @else if $type == "null" {
    $str: $str + "null";
  } @else if $type == "bool" {
    $str: $str + $value;
  } @else {
    $str: $str + "\"" + $value + "\"";
  }
  @return $str;
}

@mixin ui-dump-ui-values() {
  content: ui-to-json($ui-values);
}

@mixin ui-pressable-effect(
  $position: relative,
  $pseudo: before,
  $touch: 0.07,
  $press: 0.14
) {
  @if $position {
    position: $position;
  }

  &:#{$pseudo} {
    content: "";
    display: block;
    position: absolute;
    pointer-events: none;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: currentColor;
    opacity: 0;
    transition: $ui-duration-promptly;
  }

  &:hover,
  &:focus,
  &:active {
    color: inherit;
  }

  &:hover,
  &:focus {
    &:before {
      opacity: $touch;
    }
  }

  &:active {
    &:before {
      opacity: $press;
    }
  }
}

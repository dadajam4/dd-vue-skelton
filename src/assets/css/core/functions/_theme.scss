//
// Theme Variables
//

@function get-themes() {
  @return map-get($themes, themes);
}

@function get-theme($name) {
  @return map-get(get-themes(), $name);
}

@function get-default-theme() {
  @return get-theme(map-get($themes, default));
}

@function get-color-keys($type) {
  @return map-get(map-get($themes, color-keys), $type);
}

@function get-default-theme-var($key) {
  $color: map-get($theme-default, $key);
  @if $color == null {
    @warn "#{$key} は定義されていません。";
  }
  @return $color;
}

@function get-default-theme-color($key) {
  @return get-default-theme-var(#{$key}-color);
}

@mixin set-theme-vars($name) {
  @each $key, $val in get-theme($name) {
    --#{$key}: $val;
  }
}

@mixin set-theme-props() {
  @include theme-color(color, text);
  @include theme-color(background-color, background);
  @include theme-color(border-color, divider);

  a {
    @include theme-color(color, link);

    &:hover,
    &:focus,
    &:active {
      @include theme-color(color, link-hover);
    }
  }
}

@mixin theme($name: map-get($themes, default)) {
  @include set-theme-vars($name);
  @include set-theme-props;
}


@mixin theme-color($props, $key, $important: false, $suffix: null) {
  @each $prop in $props {
    #{$prop}: $suffix get-default-theme-color($key) if($important, !important, null);
    #{$prop}: $suffix var(--#{$key}-color) if($important, !important, null);
  }
}

@mixin dump-default-theme() {
  @each $key, $val in $theme-default {
    --#{$key}: $val;
  }
}